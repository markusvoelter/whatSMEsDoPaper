I think the paper is very interesting because it does not read as “academic”. 
It instead seems very practical and based on examples one can relate to. 
It also indirectly contain design guidelines to define these systems, 
which is extremely valuable, I think. A question is, would reviewer expect 
to read how this relate to DSLs? Would it make sense to have the boring 
introduction explaining these solutions are external DSLs for practicioners 
paired with advanced tool support, and possibly implemented using projectional 
editing or other means to support multiple notations? Would it be necessary 
to describe how SMEs work today? Would it make sense to compare that to how 
developers used to work when IDEs were not available? Is the difference in 
how SEs and SMEs relate to tooling due only to the difference in the level 
of “computational thinking”, or also due to other factors? One factor could 
be that SEs are used to certain tools, which have been traditionally available
for a long time (because they were easier to build). On the other hand SMEs 
are used to tools like Word or Excel. Another factor could be that SEs 
look at IDEs as “things they could build”, so they tend to be more critical. 
typos: benfits -> benefits develoeprs -> developers critizied -> criticized